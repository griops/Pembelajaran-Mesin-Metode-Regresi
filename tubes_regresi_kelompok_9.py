# -*- coding: utf-8 -*-
"""Tubes Regresi Kelompok 9.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/174PjpcSRtWPXPHE54xcOlUnpDbCSNAk6

Pembelajaran Mesin dengan metode Regresi Linier
"""

#dataset diambil dari vega, untuk menggunakannya kita cukup mengimpor library vega_datasets
import vega_datasets

#Library Matplotlib untuk visualisasi data
import matplotlib.pyplot as plt
#Library seaborn untuk membuat prediksi tren
import seaborn as sn
#Library numpy untuk fungsi numeris matematik
import numpy as np

#Sklearn untuk machine learning
#Library linear_model untuk regresi linier pada sklearn
from sklearn.linear_model import LinearRegression
#Library model_selection untuk mengelola data set menjadi training maupun tes pada sklearn
from sklearn.model_selection import train_test_split
#Library model_selection untuk evaluasi kebenaran prediksi
import sklearn.metrics as sm

#memilih/memanggil data set
cr = vega_datasets.data.cars()
#melihat isi dataset
cr.head()

#melakukan pendefinisian parameter
HP = cr['Horsepower']
Acc = cr['Acceleration']
#Kami mengambil parameter dari tabel dataset berupa nilai horsepower dan acceleration kendaraan
#Dilakukan pengisian terhadap salah satu isi dataset yang blank dengan nilai rata-ratanya sehingga semua data terisi dengan nilai yang tidak berubah dan dapat dilakukan prediksi 
HP = HP.fillna(HP.mean())
Acc = Acc.fillna(Acc.mean())

#mengubah data menjadi ke bentuk array numpy
Daya = np.array(HP)
Percepatan = np.array(Acc)

#melakukan reshape untuk memenuhi ketentuan fungsi prediksi
Daya = Daya.reshape(len(Daya),1)
Percepatan = Percepatan.reshape(len(Percepatan),1)

#Melakukan pembagian data set sebagai data train dan data tes
Daya_belajar, Daya_uji, Percepatan_belajar, Percepatan_uji = train_test_split(Daya, Percepatan, test_size=0.22, train_size=0.78, random_state=42)

#Melakukan permodelan regresi linier
linear_reg = LinearRegression()
#Dilakukan penentuan dengan training data sumbu x, y
linear_reg.fit(Daya_belajar,Percepatan_belajar)
#Dilakukan prediksi nilai berdasarkan parameter input
Prediksi_percepatan = linear_reg.predict(Daya_uji)

#Melakukan plot nilai pada grafik
plt.scatter(Daya_belajar,Percepatan_belajar,color='blue')
plt.plot(Daya_uji,Prediksi_percepatan,color='red')

#Melakukan pengujian terhadap akurasi training terhadap pengujian

#variance_score -> akurasi nilai regresi linier, jika akurasi mendekati 1 (100%) maka semakin baik. nilai bervariasi dari 0.0-1.0
print('1. Akurasi = ', sm.explained_variance_score(Percepatan_uji,Prediksi_percepatan))

#max_error -> selisih maksimal kesalahan nilai terhadap training
print('2. Error Maksimal = ', sm.max_error(Percepatan_uji,Prediksi_percepatan))

#mean_absolute_error -> rata-rata selisih kesalahan nilai terhadap training
print('3. Rerata Error = ', sm.mean_absolute_error(Percepatan_uji,Prediksi_percepatan))

#Mean squared error dari regression loss
print('4. Mean squared error  = ', sm.mean_squared_error(Percepatan_uji,Prediksi_percepatan))

#Mean squared error secara logaritmik dari regression loss
print('5. Mean squared error logaritmik  = ', sm.mean_squared_log_error(Percepatan_uji,Prediksi_percepatan))

#Nilai median dari error regresion --> Paling baik mendekati nol (0)
print('6. Median error  = ', sm.median_absolute_error(Percepatan_uji,Prediksi_percepatan))

#Nilai R^2 (coefficient of determination) regression score function --> Paling baik mendekati satu (1)
print('7. Koefisien R^2  = ', sm.r2_score(Percepatan_uji,Prediksi_percepatan))

#Nilai Rerata distribusi Poisson dari simpangan regression loss (sebanding dengan simpangan Tweedie yang memiliki power parameter=1)
print('8. Simpangan Tweedie (p=1) = ', sm.mean_poisson_deviance(Percepatan_uji,Prediksi_percepatan))

#Nilai Rerata distribusi Gamma dari simpangan regression loss (sebanding dengan simpangan Tweedie yang memiliki power parameter=2)
print('9. Simpangan Tweedie (p=2) = ',sm.mean_gamma_deviance(Percepatan_uji,Prediksi_percepatan))

#Note: Variabel transformasi power digunakan untuk membuat distribusi probabilistik menjadi Gaussian.